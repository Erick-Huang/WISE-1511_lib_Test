#include "mbed.h"
#include "RfTest.h"
#include "SpectrumTest.h"
#include "simpleCli.h"

static int runTX_4GFSK_500(int index, char *string, int len, void *printer) {
    if(string != NULL && len != 0) return 0;
    
    if(index == 0) {
        const registerSetting_t settings[]= 
        {
            {CC1125_IOCFG3,            0xB0},
            {CC1125_IOCFG2,            0x08},
            {CC1125_IOCFG1,            0xB0},
            {CC1125_IOCFG0,            0x09},
            {CC1125_SYNC_CFG1,         0x07},
            {CC1125_DEVIATION_M,       0x53},
            {CC1125_MODCFG_DEV_E,      0x2F},
            {CC1125_DCFILT_CFG,        0x04},
            {CC1125_PREAMBLE_CFG1,     0x00},
            {CC1125_FREQ_IF_CFG,       0x00},
            {CC1125_IQIC,              0x00},
            {CC1125_CHAN_BW,           0x01},
            {CC1125_MDMCFG1,           0x06},
            {CC1125_MDMCFG0,           0x05},
            {CC1125_SYMBOL_RATE2,      0x20},
            {CC1125_SYMBOL_RATE1,      0x62},
            {CC1125_SYMBOL_RATE0,      0x4E},
            {CC1125_AGC_REF,           0x3C},
            {CC1125_AGC_CS_THR,        0xEC},
            {CC1125_AGC_CFG3,          0x83},
            {CC1125_AGC_CFG2,          0x60},
            {CC1125_AGC_CFG1,          0xA9},
            {CC1125_AGC_CFG0,          0xC0},
            {CC1125_FIFO_CFG,          0x00},
            {CC1125_SETTLING_CFG,      0x03},
            {CC1125_FS_CFG,            0x12},
            {CC1125_PKT_CFG2,          0x05},
            {CC1125_PKT_CFG1,          0x00},
            {CC1125_PKT_CFG0,          0x20},
            {CC1125_PA_CFG0,           0x06},
            {CC1125_IF_MIX_CFG,        0x00},
            {CC1125_TOC_CFG,           0x0A},
            {CC1125_FREQ2,             0x6C},
            {CC1125_FREQ1,             0x80},
            {CC1125_FS_DIG1,           0x00},
            {CC1125_FS_DIG0,           0x5F},
            {CC1125_FS_CAL0,           0x0E},
            {CC1125_FS_CHP,            0x35},
            {CC1125_FS_DIVTWO,         0x03},
            {CC1125_FS_DSM0,           0x33},
            {CC1125_FS_DVC0,           0x17},
            {CC1125_FS_PFD,            0x50},
            {CC1125_FS_PRE,            0x6E},
            {CC1125_FS_REG_DIV_CML,    0x14},
            {CC1125_FS_SPARE,          0xAC},
            {CC1125_XOSC5,             0x0E},
            {CC1125_XOSC3,             0xC7},
            {CC1125_XOSC1,             0x07},
            {CC1125_PARTNUMBER,        0x58},
            {CC1125_PARTVERSION,       0x21},
            {CC1125_SERIAL_STATUS,     0x08},
            {CC1125_MODEM_STATUS1,     0x10},
            {CC1125_XOSC_TEST1,        0x00},
        };
        registerConfig((registerSetting_t *)settings, sizeof(settings)/sizeof(registerSetting_t));
    } else {
        const registerSetting_t settings[]= 
        {
            {CC1125_IOCFG3,            0xB0},
            {CC1125_IOCFG2,            0x06},
            {CC1125_IOCFG1,            0xB0},
            {CC1125_IOCFG0,            0x40},
            {CC1125_SYNC_CFG1,         0x07},
            {CC1125_DEVIATION_M,       0x53},
            {CC1125_MODCFG_DEV_E,      0x2F},
            {CC1125_DCFILT_CFG,        0x04},
            {CC1125_PREAMBLE_CFG1,     0x18},
            {CC1125_FREQ_IF_CFG,       0x00},
            {CC1125_IQIC,              0x00},
            {CC1125_CHAN_BW,           0x01},
            {CC1125_MDMCFG0,           0x05},
            {CC1125_SYMBOL_RATE2,      0x20},
            {CC1125_SYMBOL_RATE1,      0x62},
            {CC1125_SYMBOL_RATE0,      0x4E},
            {CC1125_AGC_REF,           0x3C},
            {CC1125_AGC_CS_THR,        0xEC},
            {CC1125_AGC_CFG3,          0x83},
            {CC1125_AGC_CFG2,          0x60},
            {CC1125_AGC_CFG1,          0xA9},
            {CC1125_AGC_CFG0,          0xC0},
            {CC1125_FIFO_CFG,          0x00},
            {CC1125_SETTLING_CFG,      0x03},
            {CC1125_FS_CFG,            0x12},
            {CC1125_PKT_CFG0,          0x20},
            {CC1125_PA_CFG0,           0x06},
            {CC1125_PKT_LEN,           0xFF},
            {CC1125_IF_MIX_CFG,        0x00},
            {CC1125_TOC_CFG,           0x0A},
            {CC1125_FREQ2,             0x6C},
            {CC1125_FREQ1,             0x80},
            {CC1125_FS_DIG1,           0x00},
            {CC1125_FS_DIG0,           0x5F},
            {CC1125_FS_CAL0,           0x0E},
            {CC1125_FS_DIVTWO,         0x03},
            {CC1125_FS_DSM0,           0x33},
            {CC1125_FS_DVC0,           0x17},
            {CC1125_FS_PFD,            0x50},
            {CC1125_FS_PRE,            0x6E},
            {CC1125_FS_REG_DIV_CML,    0x14},
            {CC1125_FS_SPARE,          0xAC},
            {CC1125_XOSC5,             0x0E},
            {CC1125_XOSC3,             0xC7},
            {CC1125_XOSC1,             0x07},
            {CC1125_PARTNUMBER,        0x58},
            {CC1125_PARTVERSION,       0x21},
            {CC1125_MODEM_STATUS1,     0x10},
            {CC1125_XOSC_TEST1,        0x00},
        };
        registerConfig((registerSetting_t *)settings, sizeof(settings)/sizeof(registerSetting_t));
        tx_ber_single(20, 868000, 500, 0, 1000);
    }
    
    return true;
}

static int runTX_4GFSK_200k(int index, char *string, int len, void *printer) {
    if(string != NULL && len != 0) return 0;
    if(index == 0) {
        const registerSetting_t settings[]= 
        {
            {CC1125_IOCFG3,            0xB0},
            {CC1125_IOCFG2,            0x08},
            {CC1125_IOCFG1,            0xB0},
            {CC1125_IOCFG0,            0x09},
            {CC1125_SYNC_CFG1,         0x07},
            {CC1125_DEVIATION_M,       0x53},
            {CC1125_MODCFG_DEV_E,      0x2F},
            {CC1125_DCFILT_CFG,        0x04},
            {CC1125_PREAMBLE_CFG1,     0x00},
            {CC1125_FREQ_IF_CFG,       0x00},
            {CC1125_IQIC,              0x00},
            {CC1125_CHAN_BW,           0x01},
            {CC1125_MDMCFG1,           0x06},
            {CC1125_MDMCFG0,           0x05},
            {CC1125_SYMBOL_RATE2,      0xA9},
            {CC1125_SYMBOL_RATE1,      0x99},
            {CC1125_SYMBOL_RATE0,      0x9A},
            {CC1125_AGC_REF,           0x3C},
            {CC1125_AGC_CS_THR,        0xEC},
            {CC1125_AGC_CFG3,          0x83},
            {CC1125_AGC_CFG2,          0x60},
            {CC1125_AGC_CFG1,          0xA9},
            {CC1125_AGC_CFG0,          0xC0},
            {CC1125_FIFO_CFG,          0x00},
            {CC1125_SETTLING_CFG,      0x03},
            {CC1125_FS_CFG,            0x12},
            {CC1125_PKT_CFG2,          0x05},
            {CC1125_PKT_CFG1,          0x00},
            {CC1125_PKT_CFG0,          0x20},
            {CC1125_PA_CFG0,           0x02},
            {CC1125_IF_MIX_CFG,        0x00},
            {CC1125_TOC_CFG,           0x0A},
            {CC1125_FREQ2,             0x6C},
            {CC1125_FREQ1,             0x80},
            {CC1125_FS_DIG1,           0x00},
            {CC1125_FS_DIG0,           0x5F},
            {CC1125_FS_CAL0,           0x0E},
            {CC1125_FS_CHP,            0x35},
            {CC1125_FS_DIVTWO,         0x03},
            {CC1125_FS_DSM0,           0x33},
            {CC1125_FS_DVC0,           0x17},
            {CC1125_FS_PFD,            0x50},
            {CC1125_FS_PRE,            0x6E},
            {CC1125_FS_REG_DIV_CML,    0x14},
            {CC1125_FS_SPARE,          0xAC},
            {CC1125_XOSC5,             0x0E},
            {CC1125_XOSC3,             0xC7},
            {CC1125_XOSC1,             0x07},
            {CC1125_PARTNUMBER,        0x58},
            {CC1125_PARTVERSION,       0x21},
            {CC1125_SERIAL_STATUS,     0x08},
            {CC1125_MODEM_STATUS1,     0x10},
            {CC1125_XOSC_TEST1,        0x00},
        };
        registerConfig((registerSetting_t *)settings, sizeof(settings)/sizeof(registerSetting_t));
    } else {
        const registerSetting_t settings[]= 
        {
            {CC1125_IOCFG3,            0xB0},
            {CC1125_IOCFG2,            0x06},
            {CC1125_IOCFG1,            0xB0},
            {CC1125_IOCFG0,            0x40},
            {CC1125_SYNC_CFG1,         0x07},
            {CC1125_DEVIATION_M,       0x53},
            {CC1125_MODCFG_DEV_E,      0x2F},
            {CC1125_DCFILT_CFG,        0x04},
            {CC1125_PREAMBLE_CFG1,     0x18},
            {CC1125_FREQ_IF_CFG,       0x00},
            {CC1125_IQIC,              0x00},
            {CC1125_CHAN_BW,           0x01},
            {CC1125_MDMCFG0,           0x05},
            {CC1125_SYMBOL_RATE2,      0xA9},
            {CC1125_SYMBOL_RATE1,      0x99},
            {CC1125_SYMBOL_RATE0,      0x9A},
            {CC1125_AGC_REF,           0x3C},
            {CC1125_AGC_CS_THR,        0xEC},
            {CC1125_AGC_CFG3,          0x83},
            {CC1125_AGC_CFG2,          0x60},
            {CC1125_AGC_CFG1,          0xA9},
            {CC1125_AGC_CFG0,          0xC0},
            {CC1125_FIFO_CFG,          0x00},
            {CC1125_SETTLING_CFG,      0x03},
            {CC1125_FS_CFG,            0x12},
            {CC1125_PKT_CFG0,          0x20},
            {CC1125_PA_CFG0,           0x02},
            {CC1125_PKT_LEN,           0xFF},
            {CC1125_IF_MIX_CFG,        0x00},
            {CC1125_TOC_CFG,           0x0A},
            {CC1125_FREQ2,             0x6C},
            {CC1125_FREQ1,             0x80},
            {CC1125_FS_DIG1,           0x00},
            {CC1125_FS_DIG0,           0x5F},
            {CC1125_FS_CAL0,           0x0E},
            {CC1125_FS_DIVTWO,         0x03},
            {CC1125_FS_DSM0,           0x33},
            {CC1125_FS_DVC0,           0x17},
            {CC1125_FS_PFD,            0x50},
            {CC1125_FS_PRE,            0x6E},
            {CC1125_FS_REG_DIV_CML,    0x14},
            {CC1125_FS_SPARE,          0xAC},
            {CC1125_XOSC5,             0x0E},
            {CC1125_XOSC3,             0xC7},
            {CC1125_XOSC1,             0x07},
            {CC1125_PARTNUMBER,        0x58},
            {CC1125_PARTVERSION,       0x21},
            {CC1125_MODEM_STATUS1,     0x10},
            {CC1125_XOSC_TEST1,        0x00},
        };
        registerConfig((registerSetting_t *)settings, sizeof(settings)/sizeof(registerSetting_t));
        tx_ber_single(20, 868000, 500, 0, 1000);
    }
    return true;
}

static int runTX_2GFSK_500(int index, char *string, int len, void *printer) {
    if(string != NULL && len != 0) return 0;
    
    if(index == 0) {
        const registerSetting_t settings[]= 
        {
            {CC1125_IOCFG3,            0xB0},
            {CC1125_IOCFG2,            0x08},
            {CC1125_IOCFG1,            0xB0},
            {CC1125_IOCFG0,            0x09},
            {CC1125_SYNC_CFG1,         0x08},
            {CC1125_DEVIATION_M,       0x99},
            {CC1125_MODCFG_DEV_E,      0x0D},
            {CC1125_DCFILT_CFG,        0x15},
            {CC1125_PREAMBLE_CFG1,     0x00},
            {CC1125_FREQ_IF_CFG,       0x39},
            {CC1125_IQIC,              0x00},
            {CC1125_CHAN_BW,           0x02},
            {CC1125_MDMCFG1,           0x06},
            {CC1125_MDMCFG0,           0x05},
            {CC1125_SYMBOL_RATE2,      0x30},
            {CC1125_SYMBOL_RATE1,      0x62},
            {CC1125_SYMBOL_RATE0,      0x4E},
            {CC1125_AGC_REF,           0x3C},
            {CC1125_AGC_CS_THR,        0xEF},
            {CC1125_AGC_CFG1,          0xA9},
            {CC1125_AGC_CFG0,          0xC0},
            {CC1125_FIFO_CFG,          0x00},
            {CC1125_SETTLING_CFG,      0x03},
            {CC1125_FS_CFG,            0x12},
            {CC1125_PKT_CFG2,          0x05},
            {CC1125_PKT_CFG1,          0x00},
            {CC1125_PKT_CFG0,          0x20},
            {CC1125_PA_CFG0,           0x7E},
            {CC1125_IF_MIX_CFG,        0x00},
            {CC1125_TOC_CFG,           0x0A},
            {CC1125_FREQ2,             0x6C},
            {CC1125_FREQ1,             0x80},
            {CC1125_FS_DIG1,           0x00},
            {CC1125_FS_DIG0,           0x5F},
            {CC1125_FS_CAL0,           0x0E},
            {CC1125_FS_CHP,            0x35},
            {CC1125_FS_DIVTWO,         0x03},
            {CC1125_FS_DSM0,           0x33},
            {CC1125_FS_DVC0,           0x17},
            {CC1125_FS_PFD,            0x50},
            {CC1125_FS_PRE,            0x6E},
            {CC1125_FS_REG_DIV_CML,    0x14},
            {CC1125_FS_SPARE,          0xAC},
            {CC1125_XOSC5,             0x0E},
            {CC1125_XOSC3,             0xC7},
            {CC1125_XOSC1,             0x07},
            {CC1125_PARTNUMBER,        0x58},
            {CC1125_PARTVERSION,       0x21},
            {CC1125_SERIAL_STATUS,     0x08},
            {CC1125_MODEM_STATUS1,     0x10},
            {CC1125_XOSC_TEST1,        0x00},
        };
        registerConfig((registerSetting_t *)settings, sizeof(settings)/sizeof(registerSetting_t));
    } else {
        const registerSetting_t settings[]= 
        {
            {CC1125_IOCFG3,            0xB0},
            {CC1125_IOCFG2,            0x06},
            {CC1125_IOCFG1,            0xB0},
            {CC1125_IOCFG0,            0x40},
            {CC1125_SYNC_CFG1,         0x08},
            {CC1125_DEVIATION_M,       0x99},
            {CC1125_MODCFG_DEV_E,      0x0D},
            {CC1125_DCFILT_CFG,        0x15},
            {CC1125_PREAMBLE_CFG1,     0x18},
            {CC1125_FREQ_IF_CFG,       0x39},
            {CC1125_IQIC,              0x00},
            {CC1125_CHAN_BW,           0x02},
            {CC1125_MDMCFG0,           0x05},
            {CC1125_SYMBOL_RATE2,      0x30},
            {CC1125_SYMBOL_RATE1,      0x62},
            {CC1125_SYMBOL_RATE0,      0x4E},
            {CC1125_AGC_REF,           0x3C},
            {CC1125_AGC_CS_THR,        0xEF},
            {CC1125_AGC_CFG1,          0xA9},
            {CC1125_AGC_CFG0,          0xC0},
            {CC1125_FIFO_CFG,          0x00},
            {CC1125_SETTLING_CFG,      0x03},
            {CC1125_FS_CFG,            0x12},
            {CC1125_PKT_CFG0,          0x20},
            {CC1125_PA_CFG0,           0x7E},
            {CC1125_PKT_LEN,           0xFF},
            {CC1125_IF_MIX_CFG,        0x00},
            {CC1125_TOC_CFG,           0x0A},
            {CC1125_FREQ2,             0x6C},
            {CC1125_FREQ1,             0x80},
            {CC1125_FS_DIG1,           0x00},
            {CC1125_FS_DIG0,           0x5F},
            {CC1125_FS_CAL0,           0x0E},
            {CC1125_FS_DIVTWO,         0x03},
            {CC1125_FS_DSM0,           0x33},
            {CC1125_FS_DVC0,           0x17},
            {CC1125_FS_PFD,            0x50},
            {CC1125_FS_PRE,            0x6E},
            {CC1125_FS_REG_DIV_CML,    0x14},
            {CC1125_FS_SPARE,          0xAC},
            {CC1125_XOSC5,             0x0E},
            {CC1125_XOSC3,             0xC7},
            {CC1125_XOSC1,             0x07},
            {CC1125_PARTNUMBER,        0x58},
            {CC1125_PARTVERSION,       0x21},
            {CC1125_MODEM_STATUS1,     0x10},
            {CC1125_XOSC_TEST1,        0x00},
        };
        registerConfig((registerSetting_t *)settings, sizeof(settings)/sizeof(registerSetting_t));
        tx_ber_single(20, 868000, 500, 0, 1000);
    }

    return true;
}

static int runTX_2GFSK_50k(int index, char *string, int len, void *printer) {
    if(string != NULL && len != 0) return 0;
    
    if(index == 0) {
        const registerSetting_t settings[]= 
        {
            {CC1125_IOCFG3,            0xB0},
            {CC1125_IOCFG2,            0x08},
            {CC1125_IOCFG1,            0xB0},
            {CC1125_IOCFG0,            0x09},
            {CC1125_SYNC_CFG1,         0x08},
            {CC1125_DEVIATION_M,       0x99},
            {CC1125_MODCFG_DEV_E,      0x0D},
            {CC1125_DCFILT_CFG,        0x15},
            {CC1125_PREAMBLE_CFG1,     0x00},
            {CC1125_FREQ_IF_CFG,       0x39},
            {CC1125_IQIC,              0x00},
            {CC1125_CHAN_BW,           0x02},
            {CC1125_MDMCFG1,           0x06},
            {CC1125_MDMCFG0,           0x05},
            {CC1125_SYMBOL_RATE2,      0x99},
            {CC1125_SYMBOL_RATE1,      0x99},
            {CC1125_SYMBOL_RATE0,      0x9A},
            {CC1125_AGC_REF,           0x3C},
            {CC1125_AGC_CS_THR,        0xEF},
            {CC1125_AGC_CFG1,          0xA9},
            {CC1125_AGC_CFG0,          0xC0},
            {CC1125_FIFO_CFG,          0x00},
            {CC1125_SETTLING_CFG,      0x03},
            {CC1125_FS_CFG,            0x12},
            {CC1125_PKT_CFG2,          0x05},
            {CC1125_PKT_CFG1,          0x00},
            {CC1125_PKT_CFG0,          0x20},
            {CC1125_PA_CFG0,           0x7B},
            {CC1125_IF_MIX_CFG,        0x00},
            {CC1125_TOC_CFG,           0x0A},
            {CC1125_FREQ2,             0x6C},
            {CC1125_FREQ1,             0x80},
            {CC1125_FS_DIG1,           0x00},
            {CC1125_FS_DIG0,           0x5F},
            {CC1125_FS_CAL0,           0x0E},
            {CC1125_FS_CHP,            0x35},
            {CC1125_FS_DIVTWO,         0x03},
            {CC1125_FS_DSM0,           0x33},
            {CC1125_FS_DVC0,           0x17},
            {CC1125_FS_PFD,            0x50},
            {CC1125_FS_PRE,            0x6E},
            {CC1125_FS_REG_DIV_CML,    0x14},
            {CC1125_FS_SPARE,          0xAC},
            {CC1125_XOSC5,             0x0E},
            {CC1125_XOSC3,             0xC7},
            {CC1125_XOSC1,             0x07},
            {CC1125_PARTNUMBER,        0x58},
            {CC1125_PARTVERSION,       0x21},
            {CC1125_SERIAL_STATUS,     0x08},
            {CC1125_MODEM_STATUS1,     0x10},
            {CC1125_XOSC_TEST1,        0x00},
        };
        registerConfig((registerSetting_t *)settings, sizeof(settings)/sizeof(registerSetting_t));
    } else {
        const registerSetting_t settings[]= 
        {
            {CC1125_IOCFG3,            0xB0},
            {CC1125_IOCFG2,            0x06},
            {CC1125_IOCFG1,            0xB0},
            {CC1125_IOCFG0,            0x40},
            {CC1125_SYNC_CFG1,         0x08},
            {CC1125_DEVIATION_M,       0x99},
            {CC1125_MODCFG_DEV_E,      0x0D},
            {CC1125_DCFILT_CFG,        0x15},
            {CC1125_PREAMBLE_CFG1,     0x18},
            {CC1125_FREQ_IF_CFG,       0x39},
            {CC1125_IQIC,              0x00},
            {CC1125_CHAN_BW,           0x02},
            {CC1125_MDMCFG0,           0x05},
            {CC1125_SYMBOL_RATE2,      0x99},
            {CC1125_SYMBOL_RATE1,      0x99},
            {CC1125_SYMBOL_RATE0,      0x9A},
            {CC1125_AGC_REF,           0x3C},
            {CC1125_AGC_CS_THR,        0xEF},
            {CC1125_AGC_CFG1,          0xA9},
            {CC1125_AGC_CFG0,          0xC0},
            {CC1125_FIFO_CFG,          0x00},
            {CC1125_SETTLING_CFG,      0x03},
            {CC1125_FS_CFG,            0x12},
            {CC1125_PKT_CFG0,          0x20},
            {CC1125_PA_CFG0,           0x7B},
            {CC1125_PKT_LEN,           0xFF},
            {CC1125_IF_MIX_CFG,        0x00},
            {CC1125_TOC_CFG,           0x0A},
            {CC1125_FREQ2,             0x6C},
            {CC1125_FREQ1,             0x80},
            {CC1125_FS_DIG1,           0x00},
            {CC1125_FS_DIG0,           0x5F},
            {CC1125_FS_CAL0,           0x0E},
            {CC1125_FS_DIVTWO,         0x03},
            {CC1125_FS_DSM0,           0x33},
            {CC1125_FS_DVC0,           0x17},
            {CC1125_FS_PFD,            0x50},
            {CC1125_FS_PRE,            0x6E},
            {CC1125_FS_REG_DIV_CML,    0x14},
            {CC1125_FS_SPARE,          0xAC},
            {CC1125_XOSC5,             0x0E},
            {CC1125_XOSC3,             0xC7},
            {CC1125_XOSC1,             0x07},
            {CC1125_PARTNUMBER,        0x58},
            {CC1125_PARTVERSION,       0x21},
            {CC1125_MODEM_STATUS1,     0x10},
            {CC1125_XOSC_TEST1,        0x00},
        };
        registerConfig((registerSetting_t *)settings, sizeof(settings)/sizeof(registerSetting_t));
        tx_ber_single(20, 868000, 500, 0, 1000);
    }
    
    return true;
}

static int runTX_2FSK_300(int index, char *string, int len, void *printer) {
    if(string != NULL && len != 0) return 0;
    if(index == 0) {
        const registerSetting_t settings[]= 
        {
            {CC1125_IOCFG3,            0xB0},
            {CC1125_IOCFG2,            0x08},
            {CC1125_IOCFG1,            0xB0},
            {CC1125_IOCFG0,            0x09},
            {CC1125_SYNC_CFG1,         0x0B},
            {CC1125_MODCFG_DEV_E,      0x01},
            {CC1125_DCFILT_CFG,        0x1C},
            {CC1125_PREAMBLE_CFG1,     0x00},
            {CC1125_IQIC,              0xC6},
            {CC1125_CHAN_BW,           0x69},
            {CC1125_MDMCFG1,           0x06},
            {CC1125_MDMCFG0,           0x05},
            {CC1125_SYMBOL_RATE2,      0x23},
            {CC1125_AGC_REF,           0x15},
            {CC1125_AGC_CS_THR,        0x19},
            {CC1125_AGC_CFG1,          0xA9},
            {CC1125_AGC_CFG0,          0xCF},
            {CC1125_FIFO_CFG,          0x00},
            {CC1125_SETTLING_CFG,      0x03},
            {CC1125_FS_CFG,            0x12},
            {CC1125_PKT_CFG2,          0x05},
            {CC1125_PKT_CFG1,          0x00},
            {CC1125_PKT_CFG0,          0x20},
            {CC1125_PA_CFG0,           0x7E},
            {CC1125_IF_MIX_CFG,        0x00},
            {CC1125_FREQOFF_CFG,       0x22},
            {CC1125_FREQ2,             0x6C},
            {CC1125_FREQ1,             0x80},
            {CC1125_FS_DIG1,           0x00},
            {CC1125_FS_DIG0,           0x5F},
            {CC1125_FS_CAL0,           0x0E},
            {CC1125_FS_CHP,            0x35},
            {CC1125_FS_DIVTWO,         0x03},
            {CC1125_FS_DSM0,           0x33},
            {CC1125_FS_DVC0,           0x17},
            {CC1125_FS_PFD,            0x50},
            {CC1125_FS_PRE,            0x6E},
            {CC1125_FS_REG_DIV_CML,    0x14},
            {CC1125_FS_SPARE,          0xAC},
            {CC1125_XOSC5,             0x0E},
            {CC1125_XOSC3,             0xC7},
            {CC1125_XOSC1,             0x07},
            {CC1125_PARTNUMBER,        0x58},
            {CC1125_PARTVERSION,       0x21},
            {CC1125_SERIAL_STATUS,     0x08},
            {CC1125_MODEM_STATUS1,     0x10},
            {CC1125_XOSC_TEST1,        0x00},
        };
        registerConfig((registerSetting_t *)settings, sizeof(settings)/sizeof(registerSetting_t));
    } else {
        const registerSetting_t settings[]= 
        {
            {CC1125_IOCFG3,            0xB0},
            {CC1125_IOCFG2,            0x06},
            {CC1125_IOCFG1,            0xB0},
            {CC1125_IOCFG0,            0x40},
            {CC1125_SYNC_CFG1,         0x0B},
            {CC1125_MODCFG_DEV_E,      0x01},
            {CC1125_DCFILT_CFG,        0x1C},
            {CC1125_IQIC,              0xC6},
            {CC1125_CHAN_BW,           0x69},
            {CC1125_MDMCFG0,           0x05},
            {CC1125_SYMBOL_RATE2,      0x23},
            {CC1125_AGC_REF,           0x15},
            {CC1125_AGC_CS_THR,        0x19},
            {CC1125_AGC_CFG1,          0xA9},
            {CC1125_AGC_CFG0,          0xCF},
            {CC1125_FIFO_CFG,          0x00},
            {CC1125_SETTLING_CFG,      0x03},
            {CC1125_FS_CFG,            0x12},
            {CC1125_PKT_CFG0,          0x20},
            {CC1125_PA_CFG0,           0x7E},
            {CC1125_PKT_LEN,           0xFF},
            {CC1125_IF_MIX_CFG,        0x00},
            {CC1125_FREQOFF_CFG,       0x22},
            {CC1125_FREQ2,             0x6C},
            {CC1125_FREQ1,             0x80},
            {CC1125_FS_DIG1,           0x00},
            {CC1125_FS_DIG0,           0x5F},
            {CC1125_FS_CAL0,           0x0E},
            {CC1125_FS_DIVTWO,         0x03},
            {CC1125_FS_DSM0,           0x33},
            {CC1125_FS_DVC0,           0x17},
            {CC1125_FS_PFD,            0x50},
            {CC1125_FS_PRE,            0x6E},
            {CC1125_FS_REG_DIV_CML,    0x14},
            {CC1125_FS_SPARE,          0xAC},
            {CC1125_XOSC5,             0x0E},
            {CC1125_XOSC3,             0xC7},
            {CC1125_XOSC1,             0x07},
            {CC1125_PARTNUMBER,        0x58},
            {CC1125_PARTVERSION,       0x21},
            {CC1125_MODEM_STATUS1,     0x10},
            {CC1125_XOSC_TEST1,        0x00},
        };
        registerConfig((registerSetting_t *)settings, sizeof(settings)/sizeof(registerSetting_t));
        tx_ber_single(20, 868000, 500, 0, 1000);
    }

    return true;
}

static int runTX_2FSK_1_2k(int index, char *string, int len, void *printer) {
    if(string != NULL && len != 0) return 0;
    if(index == 0) {
        const registerSetting_t settings[]= 
        {
            {CC1125_IOCFG3,            0xB0},
            {CC1125_IOCFG2,            0x08},
            {CC1125_IOCFG1,            0xB0},
            {CC1125_IOCFG0,            0x09},
            {CC1125_SYNC_CFG1,         0x0B},
            {CC1125_DCFILT_CFG,        0x1C},
            {CC1125_PREAMBLE_CFG1,     0x00},
            {CC1125_IQIC,              0xC6},
            {CC1125_CHAN_BW,           0x19},
            {CC1125_MDMCFG1,           0x06},
            {CC1125_MDMCFG0,           0x05},
            {CC1125_AGC_REF,           0x20},
            {CC1125_AGC_CS_THR,        0x19},
            {CC1125_AGC_CFG1,          0xA9},
            {CC1125_AGC_CFG0,          0xCF},
            {CC1125_FIFO_CFG,          0x00},
            {CC1125_SETTLING_CFG,      0x03},
            {CC1125_FS_CFG,            0x12},
            {CC1125_PKT_CFG2,          0x05},
            {CC1125_PKT_CFG1,          0x00},
            {CC1125_PKT_CFG0,          0x20},
            {CC1125_PA_CFG0,           0x7E},
            {CC1125_IF_MIX_CFG,        0x00},
            {CC1125_FREQOFF_CFG,       0x22},
            {CC1125_FREQ2,             0x6C},
            {CC1125_FREQ1,             0x80},
            {CC1125_FS_DIG1,           0x00},
            {CC1125_FS_DIG0,           0x5F},
            {CC1125_FS_CAL0,           0x0E},
            {CC1125_FS_DIVTWO,         0x03},
            {CC1125_FS_DSM0,           0x33},
            {CC1125_FS_DVC0,           0x17},
            {CC1125_FS_PFD,            0x50},
            {CC1125_FS_PRE,            0x6E},
            {CC1125_FS_REG_DIV_CML,    0x14},
            {CC1125_FS_SPARE,          0xAC},
            {CC1125_XOSC5,             0x0E},
            {CC1125_XOSC3,             0xC7},
            {CC1125_XOSC1,             0x07},
            {CC1125_PARTNUMBER,        0x58},
            {CC1125_PARTVERSION,       0x21},
            {CC1125_SERIAL_STATUS,     0x08},
            {CC1125_MODEM_STATUS1,     0x10},
            {CC1125_XOSC_TEST1,        0x00},
        };
        registerConfig((registerSetting_t *)settings, sizeof(settings)/sizeof(registerSetting_t));
    } else {
        const registerSetting_t settings[]= 
        {
              {CC1125_IOCFG3,            0xB0},
              {CC1125_IOCFG2,            0x06},
              {CC1125_IOCFG1,            0xB0},
              {CC1125_IOCFG0,            0x40},
              {CC1125_SYNC_CFG1,         0x0B},
              {CC1125_DCFILT_CFG,        0x1C},
              {CC1125_IQIC,              0xC6},
              {CC1125_CHAN_BW,           0x19},
              {CC1125_MDMCFG0,           0x05},
              {CC1125_AGC_REF,           0x20},
              {CC1125_AGC_CS_THR,        0x19},
              {CC1125_AGC_CFG1,          0xA9},
              {CC1125_AGC_CFG0,          0xCF},
              {CC1125_FIFO_CFG,          0x00},
              {CC1125_SETTLING_CFG,      0x03},
              {CC1125_FS_CFG,            0x12},
              {CC1125_PKT_CFG0,          0x20},
              {CC1125_PA_CFG0,           0x7E},
              {CC1125_PKT_LEN,           0xFF},
              {CC1125_IF_MIX_CFG,        0x00},
              {CC1125_FREQOFF_CFG,       0x22},
              {CC1125_FREQ2,             0x6C},
              {CC1125_FREQ1,             0x80},
              {CC1125_FS_DIG1,           0x00},
              {CC1125_FS_DIG0,           0x5F},
              {CC1125_FS_CAL0,           0x0E},
              {CC1125_FS_DIVTWO,         0x03},
              {CC1125_FS_DSM0,           0x33},
              {CC1125_FS_DVC0,           0x17},
              {CC1125_FS_PFD,            0x50},
              {CC1125_FS_PRE,            0x6E},
              {CC1125_FS_REG_DIV_CML,    0x14},
              {CC1125_FS_SPARE,          0xAC},
              {CC1125_XOSC5,             0x0E},
              {CC1125_XOSC3,             0xC7},
              {CC1125_XOSC1,             0x07},
              {CC1125_PARTNUMBER,        0x58},
              {CC1125_PARTVERSION,       0x21},
              {CC1125_MODEM_STATUS1,     0x10},
              {CC1125_XOSC_TEST1,        0x00},
        };
        registerConfig((registerSetting_t *)settings, sizeof(settings)/sizeof(registerSetting_t));
        tx_ber_single(20, 868000, 500, 0, 1000);
    }

    return true;
}

int SpectrumTest(int index, char *string, int len, void *printer) {
    if(string != NULL && len != 0) return 0;

	simple_cmds cmds[] = {
			{ "Spectrum Test" /*title*/,  		                NULL,NULL },
            { "TX: 4-GFSK, 500 bps CW (Continuous TX)",         0   ,runTX_4GFSK_500},
            { "TX: 4-GFSK, 500 bps CW (Packet Tx)",             1   ,runTX_4GFSK_500},
            { "$---",                                           NULL,NULL },
			{ "TX: 4-GFSK, 200k bps CW (Continuous TX)",		0   ,runTX_4GFSK_200k },
            { "TX: 4-GFSK, 200k bps CW (Packet Tx)",			1   ,runTX_4GFSK_200k },
            { "$---",                                           NULL,NULL },
			{ "TX: 2-GFSK, 500 bps CW (Continuous TX)",			0   ,runTX_2GFSK_500 },
            { "TX: 2-GFSK, 500 bps CW (Packet Tx)",				1   ,runTX_2GFSK_500 },
            { "$---",                                           NULL,NULL },
            { "TX: 2-GFSK, 50k bps CW (Continuous TX)",			0   ,runTX_2GFSK_50k },
            { "TX: 2-GFSK, 50k bps CW (Packet Tx)",				1   ,runTX_2GFSK_50k },
            { "$---",                                           NULL,NULL },
			{ "TX: 2FSK, 300 bps CW (Continuous TX)",			0   ,runTX_2FSK_300 },
            { "TX: 2FSK, 300 bps CW (Packet Tx)",				1   ,runTX_2FSK_300 },
            { "$---",                                           NULL,NULL },
            { "TX: 2FSK, 1.2k bps CW (Continuous TX)",			0   ,runTX_2FSK_1_2k },
            { "TX: 2FSK, 1.2k bps CW (Packet Tx)",				1   ,runTX_2FSK_1_2k },
			{ NULL,											NULL,NULL }
	};
	return simple_cli_list(cmds);
}